7-1 Fake News (20 分)
题意大概是，给定N个新闻网站和M个事件，让你找出最有可能成为假新闻网站的编号，第i个网站成为假新闻的可能性为ni/N,其中ni是在某个事件中，其余N-1个网站选项与第i个网站不同的个数，题目保证答案是唯一的。

如果按照常规暴力方法去枚举与第i个网站不同的个数显然时间复杂度是O(m*n^2),是会超时几个点的。可以考虑用哈希表进行优化，对于每个事件的选项个数用哈希表进行记录，在求第i个事件的ni时候就可以省去一重循环，直接用N–hash[Ri]求出ni即可。时间复杂度为O(m*n)。


7-2 Rank a Linked List (25 分)
题目大意是，给定一个链表，求出每个编号(i=0,…,n-1)在这个链表中的位置，位置下标从1开始。

由于题目给出的方式是第i个点的下一个节点的编号即next指针所指向的那个编号，可以考虑用数组模拟链表，假定第i个下标的下一个节点的编号为x，每次让next[i]=x，然后找到入度为0的节点即根节点，for循环遍历一下整个链表，用rank数组来记录每个节点在链表中的位置，从1开始递增。最后按顺序输出rank数组即可。时间复杂度O(n)。

7-3 Size of Military Unit (25 分)
题目大意是，给定一颗共N个节点的树，1号点为根节点，共有M个查询，每次查询一个节点编号，输出以该节点为根节点的子树的大小（包括自己）。

树的存储就用邻接表来存，如果对于每个查询都进行一次爆搜是会超时的，所以考虑用记忆化搜索进行优化，定义sz[i]数组为以i为根节点的子树的大小，在查询前从1开始记忆化搜索，每次都记录该以该节点为根节点的子树大小，这样可以保证每个点都只向下搜索了一次。下面给出搜索的核心代码：
int dfs(int u)
{
	int sum = 1;
	for (int i = h[u]; ~i; i = ne[i])
	{
		int j = e[i];
		sum += dfs(j);
	}
	sz[u] = sum;
	return sum;
}

7-4 Helping the Couriers (30 分)
带坑的一道题，题目大意就是给出N个快递和快递开始派送时间，每个快递有deadline，Y，P三个信息，分别表示最晚送达时间，送达后可获得的报酬，超过最晚送达时间要罚款的钱。以及M条道路，每条道路通行的时间消耗。以及K个派送计划，求出K个计划中可以获得最大报酬和送完所有快递再回到0号点时间，若最大报酬相同，则求最短的时间。

不难发现这是一题图论，看到N的大小是小于等于1000就可以想到floyd，先用floyd初始化出任意两点之间的最短距离，然后就是对每个计划进行模拟，求出答案即可。要注意的坑点有：给出的计划不一定是合法的，即不一定每个快递都涉及到，对于这种计划要忽略。其次完成派送的时间可能已经不在当天了，所以对于完成的时间，如果小时数大于等于24，要对24进行取模。时间复杂度是O（n^3）
